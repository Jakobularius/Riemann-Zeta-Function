#to use:
#first, get a list of primes.
#for example, primeList=p.primelist(1000000)
#
#second, call NPioverL on various large values of l
#for example, NPioverL(100000,primeList,2)

import csv
import math
from mpmath import *

def primelist(max):
    pl=[2]
    i=3
    while(i<max):
        j=2
        while(j<=math.sqrt(i)):
            if (i%j==0):
                break
            j=j+1
        if j>math.sqrt(i):
            pl=pl+[i]
        i=i+2
    return pl

def NPioverL(l,primeList,power,digits=1000):
    mp.dps=digits
    return N(l,primeList,power)*(mp.pi**power)/(l**power)

def N(l,primeList,power):
    term=1
    sign=-1
    sum=l**power
    while True:
        t=Nterm(l,primeList,term,power)
        if t==0:
            break
        sum=sum+t*sign
        sign=sign*(-1)
        term=term+1
    return sum

def Nterm(l,primeList,term,power):
    primeIndices=[-1]*term
    return NtermRecursive(l,primeIndices,primeList,power)

def NtermRecursive(l,primeIndices,primeList,power):
    i=0
    while i<len(primeIndices) and primeIndices[i]!=-1:
        i=i+1

    if i==len(primeIndices):
        return (math.floor(l/product(primeIndices,primeList)))**power

    sum=0
    while True:
        primeIndices[i]=primeIndices[i]+1
        if i==0 and primeIndices[i]==len(primeList):
            print "Need more primes"
            break
        if i>0 and primeIndices[i]>=primeIndices[i-1]:
            break
        
        if product(primeIndices[:i+1],primeList)>l:
            break
        sum=sum+NtermRecursive(l,copyList(primeIndices),primeList,power)
    return sum

def product(primeIndices,primeList):
    p=1
    for i in range(len(primeIndices)):
        p=p*primeList[primeIndices[i]]
    return p

def copyList(oldlst):
    newlst=[]
    for i in range(len(oldlst)):
        newlst=newlst+[oldlst[i]]
    return newlst

#this is just for verification
def N2term2(l,pl):
    i=0
    sum=0
    while True:
        if i>=len(pl):
            print "Need more primes"
            break
        if l<pl[i]:
            break
        sum=sum+math.floor(l/pl[i])**2
        i=i+1
    return sum

results = []
#filename='../million_primes.txt'
filename='../../Zeta Function/julia_billion_primes.txt'
with open(filename) as inputfile:
    for line in inputfile:
        try:
            results.append(int(line))
        except ValueError:
            pass

computation= NPioverL(10**6,results, 5)
#computation= NPioverL(10**5,results, 3)
print computation
writefile=open('1bil_l-10e6_s-5.txt','w')
#writefile= open('../../Zeta Function/10billion_result.txt','w')

writefile.write('NPioverL(l=10**6,1bil primes, 5)\n'+str(computation))
writefile.close()

'''
Computation with 1 billion primes, l=10**4
6.000223133456999256406429341372316118630134313659210561498714093401657145976757325913407670276406751
[Finished in 57.0s]

Computation with 1 billion primes l=10**6 s=3
25.79435196830514739196649114315942154278516800432624967817725054582060638281651425784511864815054226772888961976127366556072349726158545544593297456777550056169757734131239592261739207226538324244748137969221048100345449005947105866404227283903449978971379257756959773274372692412644277993522232171908690497894105374175060643036155536481560122597396027272880433540197728062895460127599445544466651508714780041355527072450351036574594215949509508390610813937625711964825310360360388276886460346148301349785518014529280902012042258442152214003397693724558206695230998526556313120015789897867700316709499568464785066407469914237906620746028506670772037463679659402995886525437037098227149099392590745955401184408854410706011049727857833309883218055597093645013492117813640073615255214567870585071107667385486028474223917394201957806543345302154763700900897269607901418078442550040116002207783008227743076212749650197124693488487837701272777617066032283712364516387624351136745185242789564946831435947476
[Finished in 86.1s with exit code 1]

Computation with 1 billion primes l=10**6 s=5
295.1215155137891 1541798938078121737700069337089671870990382513102357017191730351779940630977993305554839179273304553663926430949167319664754170231180975095995249608121122560619183229408126597646927609588007523335722256079012160807898703421149272545402709347115297219963794942791234545708641441321136927794418754006118707119442822789769020072737566579224446305416306624333052671059121342382719093948657609394861023809822533527360720362338434921073367554889529718856992277931738556541517204240477310751722266960742788694666151871158661941113416757691517852967387967018093511867385491101577090198093857583816240844777986388900406303543635526413319872201147189884445631083693524345546734874524724187939127478809529906581283216840057326521186374964870060632798390342998502935612946962771900789841445202429794028958987749818134380032293054628445680833960154226415714281991118434764508177455897718323999485705493086351793189284091994129850717693235781743827975779429713087658730126340456018104759776238411654
[Finished in 84.4s]


Computation with 1 billion primes l=10**8 s=5
295.1215099863791053975539367733741682283358704347211344028621559384988722540192763755999792609015279953713024793251288567614986409731997530238862941687880072093432858023888222220594609401004738966321698437399533630149474746559846599861343879416975848631422287116239282360119444272371563848603522867607219948056417864965182154821648197356190206682373662193116062075475960857932010315882186999591292319973629034110356384047631245269351929102279156956112716862518750193341960381123001515820768484189307768247352736356660566731633258585458849091486087793298458732749804015037745291820813829713755511197512419881517867522322050833505619784539430026381931198065222067655871986704355241984253535823504747701136983428181586684797560439834233622380340207140912909687842826365047791326836937791550193905555444172664860817269158865941816574934488110094581745078631145552510940335490333193237835330162399169004791052274072062371322370103047183568722644948703932172717672713422739218732878794727089425401305499366
[Finished in 29281.4s]

Computation with 1 billion primes l=10**8
25.79435019261058967340015415097722890612979801927866471744769638685671609097361061279893211815735228038340933497356997708866891588668526375477860673169008928318573103665899076010943667549119118789563698766811365470086434420485278219302395738712173836128906138451248304444135407809573659225791359096398486115291906236676606344954649600912885787181019500428787130710558643767639541825424287547708651650563346102428548231486343923665747551184735737039706746651821253995291733945301899461394405212377046999483078927168733728591594267925900998107223493199013606454696279408765814424884207085986866864731034606151938338386234346340490970998525788816379984209637764073900848817571475908991261880870678999701062390119203846644412747080429243168312548666048223260248025532003575631496485656839676077779716891466701474166374368498583664393906134687932800416574651430880880242923841623661681084553594175892232016336812276541177526585364340557746051495502645441738019536531234513161914838872904528730094154832653
[Finished in 3629.3s]

z(3)
1b primes, l=10**4
25.7946348142317005689130286067437538366171646585455991960556469767637520430255693554896049449805637
[Finished in 57.7s]
'''